// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	report "github.com/zd4r/dynamic-user-segmentation/internal/model/report"

	time "time"
)

// ReportRepository is an autogenerated mock type for the reportRepository type
type ReportRepository struct {
	mock.Mock
}

// CreateBatchRecord provides a mock function with given fields: ctx, records
func (_m *ReportRepository) CreateBatchRecord(ctx context.Context, records []report.Record) error {
	ret := _m.Called(ctx, records)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []report.Record) error); ok {
		r0 = rf(ctx, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecordsInIntervalByUser provides a mock function with given fields: ctx, userId, from, to
func (_m *ReportRepository) GetRecordsInIntervalByUser(ctx context.Context, userId int, from time.Time, to time.Time) ([]report.Record, error) {
	ret := _m.Called(ctx, userId, from, to)

	var r0 []report.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) ([]report.Record, error)); ok {
		return rf(ctx, userId, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) []report.Record); ok {
		r0 = rf(ctx, userId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]report.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReportRepository creates a new instance of ReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportRepository {
	mock := &ReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
